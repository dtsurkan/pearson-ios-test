//
//  CoursesViewController.swift
//  Pearson
//
//  Created by Dima Tsurkan on 09.11.2017.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CoursesDisplayLogic: class {
    func displayError(viewModel: Courses.FetchCourses.ViewModel)
    func displayCourses(viewModel: Courses.FetchCourses.ViewModel)
}

class CoursesViewController: UIViewController, CoursesDisplayLogic {
    var interactor: CoursesBusinessLogic?
    var router: (NSObjectProtocol & CoursesRoutingLogic & CoursesDataPassing)?
    var courses: [Course] = []
    
    // MARK: - Outlets
    
    @IBOutlet weak var tableView: UITableView!

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = CoursesInteractor()
        let presenter = CoursesPresenter()
        let router = CoursesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchCoursesOnLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        configureView()
    }
    
    // MARK: - Internal
    
    private func configureView() {
        configureNavigationView()
        configureTableView()
    }
    
    private func configureNavigationView() {
        navigationController?.navigationBar.barTintColor = UIColor(red: 54/255.0, green: 126/255.0, blue: 159/255.0, alpha: 1.0)
        navigationController?.navigationBar.titleTextAttributes = [NSAttributedStringKey.foregroundColor: UIColor.white]
        
        navigationItem.title = "My Courses"
    }
    
    private func configureTableView() {
        let nib = UINib(nibName: CourseTableViewCell.nibName, bundle: nil)
        tableView.register(nib, forCellReuseIdentifier: CourseTableViewCell.identifier)
        tableView.tableFooterView = UIView()
    }
    
    private func showAlert(withTitle title: String, message: String?) {
        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let okAction = UIAlertAction(title: "OK", style: .cancel, handler: nil)
        alertController.addAction(okAction)
        self.present(alertController, animated: true, completion: nil)
    }
  
    // MARK: - Fetch Courses
  
    func fetchCoursesOnLoad() {
        let request = Courses.FetchCourses.Request()
        interactor?.fetchCourses(request: request)
    }
  
    func displayError(viewModel: Courses.FetchCourses.ViewModel) {
        showAlert(withTitle: "Can't load courses", message: viewModel.printableError!)
    }
    
    func displayCourses(viewModel: Courses.FetchCourses.ViewModel) {
        self.courses = viewModel.courses
        tableView.reloadData()
    }
}

// MARK: - UITableViewDelegate, UITableViewDataSource
extension CoursesViewController: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int  {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.courses.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: CourseTableViewCell.identifier, for: indexPath) as! CourseTableViewCell
        cell.fillIn(course: self.courses[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 285
    }
    
    
    
}
